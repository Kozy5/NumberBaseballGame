package org.example

import java.util.*
import kotlin.concurrent.timer

fun main() {
    var countTryGame = 0
    var grade = ""
    val saveTryNumberList = mutableListOf<Int>()

    checkEndGame@ while (true) {
        var countTryNumber = 0
        printGameAndMenuGuideMessage()

        checkStartGame@ while (true) {
            val getHomeMenuSelectionNumber = readLine()
            when (getHomeMenuSelectionNumber) {
                "1" -> break
                "2" -> {
                    if (countTryGame == 0) {
                        printNothingRecordMessage()
                        break@checkStartGame
                    } else {
                        printMessageAboutGradeAndRecord(countTryGame,saveTryNumberList,grade)
                        printGuideMessageForRetryOrEnd()
                        while (true) {
                            val getRecordingPageMenuSelectionNumber = readln()
                            when (getRecordingPageMenuSelectionNumber) {
                                "1" -> {
                                    break@checkStartGame
                                }
                                "2" -> {
                                    printCautionMessageAboutInitializeRecord()
                                    val getFinalChoice = readln()
                                    when (getFinalChoice) {
                                        "1" -> break@checkEndGame
                                        "2" -> break@checkStartGame
                                        else -> {
                                            printExceptionHandlingMessageForFinalChoice()
                                        }
                                    }
                                }
                                else -> {
                                    printExceptionHandlingMessageForRecordPageInput()
                                }

                            }
                        }
                    }
                }
                "3" -> {
                    printMessageForGameEnd() 
                    break@checkEndGame
                }
                else -> {
                    printExceptionHandlingMessageForHomeMenuInput()
                }
            }
        }
        printGameStartMessage()

        thisGame@ while (true) {
            countTryGame += 1
            val randomNumberString = randomNumberGenerator()

            checkInputIsCorrect@ while (true) {
                val thisGameRandomNumber = randomNumberString
                while (true) {
                    var countStrike = 0
                    var countBall = 0
                    var countWildPitch = 0
                    var imageDisplay = ""

                    countTryNumber += 1
                    val getInputTryNumber = readln()
                    if (getInputTryNumber.length == 3) {
                        val countByDecisionType = countByDecisionType(
                            countStrike,
                            countBall,
                            countWildPitch,
                            getInputTryNumber,
                            thisGameRandomNumber
                        )
                        val makeImageDisplay = makeImageDisplay(
                            countByDecisionType[0],
                            countByDecisionType[1],
                            countByDecisionType[2],
                            imageDisplay
                        )
                        println("-----------------------------")
                        println()
                        println(makeImageDisplay)
                        printCountByDecisionType(countByDecisionType[0],countByDecisionType[1],countByDecisionType[2])
                        println()
                        println("-----------------------------")

                        countStrike = countByDecisionType[0]
                    } else {
                        printHowToPitchGuideMessage()
                    }

                    if (countStrike == 3) {
                        printCongratulatoryMessage()
                        break@checkInputIsCorrect
                    }
                }
            }
            break@thisGame
        }
        saveTryNumberList += countTryNumber
    }
}




fun printMessageForGameEnd() {
    println()
    println("‚öæÍ≤åÏûÑÏùÑ Ï¢ÖÎ£åÌï©ÎãàÎã§")
    println()
}

fun printExceptionHandlingMessageForHomeMenuInput() {
    println("‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ")
    println("Ïò¨Î∞îÎ•∏ Ïà´ÏûêÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî")
    println("1. Í≤åÏûÑ ÏãúÏûëÌïòÍ∏∞ 2. Í≤åÏûÑ Í∏∞Î°ù Î≥¥Í∏∞ 3. Ï¢ÖÎ£åÌïòÍ∏∞")
    println("‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ")
}

fun printExceptionHandlingMessageForRecordPageInput() {
    println()
    println("‚öæ Í≤åÏûÑÏùÑ ÏãúÏûëÌïòÎ†§Î©¥ 1Î≤à Ï¢ÖÎ£åÌïòÏãúÎ†§Î©¥ 2Î≤àÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî")
    println()
}

fun printGuideMessageForRetryOrEnd() {
    println("1.Îã§Ïãú ÎèÑÏ†ÑÌïòÍ∏∞ 2.Í≤åÏûÑ Ï¢ÖÎ£åÌïòÍ∏∞\uD83D\uDE4B\u200D‚ôÇ\uFE0F")
}

fun printCautionMessageAboutInitializeRecord() {
    println("‚ö†\uFE0F Í∏∞Î°ùÏù¥ Ï¥àÍ∏∞ÌôîÎê©ÎãàÎã§. Ï†ïÎßê Ï¢ÖÎ£åÌïòÏãúÍ≤†ÏäµÎãàÍπå?")
    println("1.Í∏∞Î°ù Ï¥àÍ∏∞Ìôî Î∞è Ï¢ÖÎ£å \uD83E\uDD14 2. Îã§Ïãú Í≤åÏûÑ ÏãúÏûëÌïòÍ∏∞ \uD83C\uDFC3")
}

fun printNothingRecordMessage() {
    println()
    println("‚ö†\uFE0F Í∏∞Î°ù Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§. Í≤åÏûÑÏùÑ ÏãúÏûëÌï©ÎãàÎã§.")
    println()
}

fun printGameAndMenuGuideMessage() {
    println("-------------------------------------")
    println("-------------Í≤åÏûÑ ÏïàÎÇ¥---------------")
    println("\"Ìà¨Íµ¨Î•º ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî!\" ÎùºÎäî ÏïàÎÇ¥Í∞Ä ÎÇòÏò§Î©¥")
    println("3ÏûêÎ¶¨ Ïà´ÏûêÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî")
    println("ÏûÖÎ†•ÌïòÏã† Ïà´ÏûêÏóêÎî∞Îùº \" Ï°¥Ïû¨ÌïòÎ©¥ \" Î≥º \uD83E\uDD4E")
    println("                  -------")
    println("Ï†ïÎãµ Ïà´ÏûêÏôÄ \" ÏúÑÏπòÍ∞Ä Í∞ôÏúºÎ©¥ \" Ïä§Ìä∏ÎùºÏù¥ÌÅ¨ ‚öæ")
    println("            -----------")
    println("Ìï¥Îãπ ÏÇ¨Ìï≠ ÏóÜÏùÑ Ïãú Ìè≠Ìà¨ ÏûÖÎãàÎã§.\uD83D\uDCA5")
    println("----------------------------------------")
    println()
    println("Î©îÎâ¥Î•º Í≥®ÎùºÏ£ºÏÑ∏Ïöî")
    println("1. Í≤åÏûÑ ÏãúÏûëÌïòÍ∏∞ \uD83C\uDFC3 2. Í≤åÏûÑ Í∏∞Î°ù Î≥¥Í∏∞ \uD83C\uDFC6 3. Ï¢ÖÎ£åÌïòÍ∏∞ \uD83D\uDE4B\u200D‚ôÇ\uFE0F")
}

fun printGameStartMessage() {
    println()
    println()
    println("‚öæ Ìà¨Íµ¨Î•º ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî!")
    println("-----------‚¨á\uFE0F 3ÏûêÎ¶¨ Ïà´Ïûê ÏûÖÎ†• ‚¨á\uFE0F------------")
}

fun printCongratulatoryMessage() {
    println()
    println()
    println("\uD83C\uDF8A\uD83C\uDF8A\uD83C\uDF8A\uD83C\uDF8A\uD83C\uDF8A\uD83C\uDF8A\uD83C\uDF8A\uD83C\uDF8A\uD83C\uDF8A\uD83C\uDF8A")
    println()
    println("Î©ãÏßÑ Ìà¨Íµ¨Î°ú ÏÇºÏßÑ ÏïÑÏõÉ!!!")
    println()
    println("\uD83C\uDF89\uD83C\uDF89\uD83C\uDF89\uD83C\uDF89\uD83C\uDF89\uD83C\uDF89\uD83C\uDF89\uD83C\uDF89\uD83C\uDF89\uD83C\uDF89")
    println()
    println()
}

fun printHowToPitchGuideMessage() {
    println()
    println("‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ")
    println("Ìà¨Íµ¨ Î∞©Î≤ïÏùÄ 3ÏûêÎ¶¨ Ïà´Ïûê ÏûÖÎ†•ÏûÖÎãàÎã§!")
    println("‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ‚öæ")
    println()
}

fun printExceptionHandlingMessageForFinalChoice() {
    println("Ïò¨Î∞îÎ•∏ Ïà´ÏûêÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî")
    println("Ï†ïÎßê Ï¢ÖÎ£åÌïòÏãúÎ†§Î©¥ 1Î≤à Îã§Ïãú ÏãúÏûëÌïòÏãúÎ†§Î©¥ 2Î≤à")
}

fun giveGradeForTryNumber(num: Int): String {
    when (num) {
        1 -> return " \uD83C\uDD91 Challenger"
        2 -> return " \uD83D\uDEBE World Class"
        3 -> return " ‚ìÇ\uFE0F Master"
        4 -> return """ üí† Diamond"""
        5 -> return " ‚ùá\uFE0F Emerald"
        6 -> return " \uD83D\uDFE2 Platinum"
        7 -> return " \uD83D\uDFE1 Gold"
        8 -> return " ‚¨ú Silver"
        9, 10 -> return " \uD83D\uDFEB Bronze"
        11, 12 -> return " ‚ñ™\uFE0F Iron"
        else -> return " ‚ò†\uFE0F ÎÑ§..?"
    }
}

fun randomNumberGenerator(): String {
    var randomNumberString = "0"
    while (randomNumberString.length < 3) {
        val randomNumber = (Math.random() * 10).toInt().toString()
        if (randomNumberString[0] == '0') {
            randomNumberString = ""
            randomNumberString += randomNumber
        } else if (!randomNumberString.contains(randomNumber)) {
            randomNumberString += randomNumber
        }
    }
    return randomNumberString
}

fun countByDecisionType(
    strike: Int,
    ball: Int,
    wildPitch: Int,
    tryNumber: String,
    randomNumber: String
): MutableList<Int> {
    var countByDecisionTypeList = mutableListOf<Int>()
    var countStrike = strike
    var countBall = ball
    var countWildPitch = wildPitch
    if (tryNumber.length == 3) {
        for (i in 0..2) {
            if (tryNumber[i] == randomNumber[i]) {
                countStrike += 1
            } else if (tryNumber.contains(randomNumber[i])) {
                countBall += 1
            } else if (!tryNumber.contains(randomNumber[i])) {
                countWildPitch += 1
            }
        }
    } else {
        printHowToPitchGuideMessage()
    }
    countByDecisionTypeList += countStrike
    countByDecisionTypeList += countBall
    countByDecisionTypeList += countWildPitch
    return countByDecisionTypeList
}

fun makeImageDisplay(strike: Int, ball: Int, wildPitch: Int, imageDisplay: String): String {
    var imgdp = imageDisplay
    val countStrike = strike
    val countBall = ball
    val countWildPitch = wildPitch
    while (true) {
        for (i in 0..countStrike - 1) {
            imgdp += "‚öæ"
        }
        for (i in 0..countBall - 1) {
            imgdp += "\uD83E\uDD4E"
        }
        for (i in 0..countWildPitch - 1) {
            imgdp += "\uD83D\uDCA5"
        }
        break
    }
    return imgdp
}

fun printCountByDecisionType(strike: Int, ball: Int, wildPitch: Int) {
    println("$strike Ïä§Ìä∏ÎùºÏù¥ÌÅ¨ / $ball Î≥º / $wildPitch Ìè≠Ìà¨ ")
}
fun printMessageAboutGradeAndRecord(tryGame:Int,saveTryNumberList: MutableList<Int>,grade:String){
    var grade = grade
    for (i in 0..tryGame - 1) {
        grade = giveGradeForTryNumber(saveTryNumberList[i])
        println("${i + 1} Î≤àÏß∏ Í≤åÏûÑ / ÏãúÎèÑ ÌöüÏàò : ${saveTryNumberList[i]} / Ìã∞Ïñ¥:${grade}")
    }
}
